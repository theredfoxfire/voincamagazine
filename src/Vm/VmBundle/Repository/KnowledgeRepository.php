<?php

namespace Vm\VmBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Vm\VmBundle\Entity\Knowledge;
/**
 * KnowledgeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KnowledgeRepository extends EntityRepository
{
	public function getNewKnowledge($category_id = null, $max = null, $offset = null, $affiliate_id = null)
	{
		$qb = $this->createQueryBuilder('k')
		->where('k.is_activated = :is')
		->setParameter('is',1)
		->orderBy('k.created_at', 'DESC');
		if($max)
		{
			$qb->setMaxResults($max);
		}
		if($offset)
		{
			$qb->setFirstResult($offset);
		}
		if($category_id)
		{
			$qb->andWhere('k.category = :category_id')
			   ->setParameter('category_id', $category_id);
		}
		if($affiliate_id){
			$qb->leftJoin('k.category', 'c')
			   ->leftJoin('c.affiliates', 'a')
			   ->andWhere('a.id = :affiliate_id')
			   ->setParameter('affiliate_id', $affiliate_id)
			;
			}
			
		$query = $qb->getQuery();
		return $query->getResult();
	}
	
	public function getNewKnown($id)
	{
		$query = $this->createQueryBuilder('k')
		->where('k.id = :id')
		->setParameter('id', $id)
		->andWhere('k.is_activated = :is')
		->setParameter('is', 1)
		->setMaxResults(1)
		->getQuery();
		
		try{
			$known = $query->getSingleResult();
			} catch (\Doctrine\Orm\NoResultException $e){
				$known = null;
				}
		return $known;
	}
	
	public function countActiveKnowledge($category_id = null)
	{
		$qb = $this->createQueryBuilder('k')
		->select('count(k.id)')
		->where('k.is_activated = :is')
		->setParameter('is',1);
		if($category_id)
		{
			$qb->andWhere('k.category = :category_id')
			->setParameter('category_id', $category_id);
		}
		$query = $qb->getQuery();
		return $query->getSingleScalarResult();
	}
	
	public function getLatestPost($category_id = null)
	{
		$query = $this->createQueryBuilder('k')
		->where('k.is_activated = :is')
		->setParameter('is', 1)
		->orderBy('k.created_at', 'DESC')
		->setMaxResults(1);
		
		if($category_id){
			$query->andWhere('k.category = :cid')
			->setParameter('cid', $category_id);
			}
		try{
			$knowledge = $query->getQuery()->getSingleResult();
			}catch(\Doctrine\Orm\NoResultException $e){
				$knowledge = null;
				}
		return $knowledge;
	}
	
	public function getForLuceneQuery($query)
	{
		$hits = Knowledge::getLucineIndex()->find($query);
		
		$pks = array();
		foreach ($hits as $hit)
		{
			$pks[] = $hit->pk;
		}
		
		if (empty($pks))
		{
			return array();
		}
		
		$q = $this->createQueryBuilder('k')
			->where('k.id IN (:pks)')
			->setParameter('pks', $pks)
			->andWhere('k.is_activated = :is')
			->setParameter('is', 1)
			->setMaxResults(20)
			->getQuery();
		
		return $q->getResult();
	}
}
